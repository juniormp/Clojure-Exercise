cmdhistory=["(\= true true)" "(\= 1 1)" "(nil? nil)" "(nil? 1)" "(fn [x] \\n  (* x 2))" "(map (fn [x](* x 2)) 2)" "(double number 2)" "(double-number 2)" "(double-number 3)" "(\= true true)" "(\= 2 (+ 1 1))" "(\= true true)" "(\= (+ 3 4) 7 (+ 2 5))" "(\= (+ 3 4) (+ 2 5))" "(\= 2 2 2)" "(\= 2 (\= 2 2/1))" "(\= 2 2/1)" "(\= true (\= 2 2/1))" "(\= 2 (\= 2 2/1))" "(\= 1 (\= 2 2/1))" "(\= 4 (\= 2 2/1))" "(\= 2 2.0)" "(\=  false (\= 2 2.0))" "(\=\= 2.0 2)" "(\= \\"hello\\" \:hello)" "(\= \\"hello\\" \:hello 'hello)" "(keyword \\"blues\\")" "(type \:blues)" "{\:a 1 \:b 2 \:c 3}" "(type {\:a 1 \:b 2 \:c 3})" "(mapa {\:a 1 \:b 2 \:c 3})" "(def mapa {\:a 1 \:b 2 \:c 3})" "(type mapa)" "(mapa (\:b {\:a 1 \:b 2 \:c 3}))" "(\:b {\:a 1 \:b 2 \:c 3})" "mapa" "(mapa (\:a))" "(mapa \:a)" "(symbol 'foo)" "(symbol \\"dpos\\")" "(\= \\"hello\\" \:hello 'hello)" "(\= 1 nill)" "(\= 1 nil)" "(not (\= 1 nil))" "(keyword x)" "(keyword)" "(keyword \:keyword)" "(\= \:hello (keyword \:keyword))" "(\= \:hello (keyword \:hello))" "(\= 'hello (symbol 'hello))" "  (\= nil nil)" "(\= 0 nil)" "(\= \:fill-in-the-blank \:fill-in-the-blank)" "(not\= \:fill-in-the-blank \:fill-in-the-blank)" "(\= \:fill-in-the-blank \:hello)" "(not\= \:fill-in-the-blank \:different)" "(\= \\"hello\\" \\"hello\\")" "(str 'world)" "(\= \\"world\\" (str 'world))" "(\= \\"Cool right?\\" (str 'cool 'right?))" "(\= \\"Cool right?\\" (str 'cool ' right?))" "(\= \\"Cool right?\\" (str 'Cool 'right?))" "(\= \\"Cool right?\\" (str 'Cool right?))" "(\= \\"Cool right?\\" (str 'Cool \:keyword right?))" "(\= \\"Cool right?\\" (str 'Cool \:right?))" "(\= \\"Coolright?\\" (str 'Cool \:right?))" "(\= \\"Coolright?\\" (str 'Cool 'right?))" "(\= \\"Coolright?\\" (str 'Cool \:right?))" "(get \\"Characters\\" h)" "(get \\"Characters\\")" "(get \\"Characters\\" chara)" "(get \\"Characters\\" \\"c\\")" "(get \\"Characters\\" \\"Characters\\")" "(get \\"Characters\\" 2)" "(\= \\\\C (get \\"Characters\\"))" "(\= \\\\C (get \\"Characters\\" 1))" "(\= \\\\C (get \\"Characters\\" 0))" "(count \\"Hello World\\")" "(\= 11 (count \\"Hello World\\"))" "(\= false (\= \\\\c \\"c\\"))" "(subs \\"Hello World\\" 0 5)" "(subs \\"Hello World\\" 6 11)" "(\= World (subs \\"Hello World\\" 6 11))" "(\= \\"World\\" (subs \\"Hello World\\" 6 11))" "(string/join '(1 2 3))" "(\= false (string/join '(1 2 3)))" "(\= \\"1, 2, 3\\" (string/join '(1 2 3)))" "(string/join \\", \\" '(1 2 3))" "(string/split-lines \\"1\\\\n2\\\\n3\\")" "(char? \\\\c)" "(string? /b)" "(string? \\\\b)" "(\= true (string? \\"String\\"))" "(string/blank? \\"\\")" "(string/blank? \\" \\")" "(\= true (string/blank? \\" \\"))" "(\= true (string/blank? \\"s\\"))" "(\= true (string/blank? \\"\\\\t\\"))" "(string/blank? \\" \\\\n \\\\t  \\")" "string/blank" " (clojure.string/blank? \\" a \\")" " (string/blank? \\" a \\")" "(clojure.string/blank? \\" \\")" "(clojure.string/blank? \\" \\\\n \\\\t \\\\r\\")" "(clojure.string/blank? \\"hello?\\\\nare you out there?\\")" "(string/split-lines \\"1\\\\n2\\\\n3\\")" "(clojure.string/split-lines \\"1\\\\n2\\\\n3\\")" " (\= [1 2 3] (string/split-lines \\"1\\\\n2\\\\n3\\"))" " (\= [\\"1\\" \\"2\\" \\"3] (string/split-lines \\"1\\\\n2\\\\n3\\"))" " (\= [\\"1\\" \\"2\\" \\"3\\"] (string/split-lines \\"1\\\\n2\\\\n3\\"))" " (\= [\\"1\\" \\"2\\" \\"3\\"] (clojure.string/split-lines \\"1\\\\n2\\\\n3\\"))" "(string/reverse \\"hello\\")" "(clojure.string/reverse \\"hello\\")" "(clojure.string/join \\", \\" '(1 2 3))" "  (\= \\"1, 2, 3\\" (clojure.string/join \\",\\" '(1 2 3)))" "(\= \\"1, 2, 3\\" (clojure.string/join \\", \\" '(1 2 3)))" "(\= 0 (clojure.string/index-of \\"hello world\\" \\\\h))" "(\= 0 (string/index-of \\"hello world\\" \\\\h))" "(clojure.string/index-of \\"hello world\\" \\\\h)" "(clojure.string/index-of \\"hello world\\" \\"h\\")" "(string/index-of \\"hello world\\" \\"h\\")" "(string/last-index-of \\"hello world, hello\\" \\"hello\\")" "(clojure.string/last-index-of \\"hello world, hello\\" \\"hello\\")" "(string/trim \\"  \\\\nhello world \\\\t \\\\n\\")" "(clojure.string/trim \\"  \\\\nhello world \\\\t \\\\n\\")" "(string/index-of \\"hello world\\" \\"bob\\")" "(clojure.string/index-of \\"hello world\\" \\"bob\\")" "(.indexOf \\"hello world, hello\\" \\"hello\\")" "  (\= 0 (string/index-of \\"hello world\\" \\"h\\"))" "  (\= 0 (.index-of \\"hello world\\" \\"h\\"))" "  (\= 0 (.indexOf \\"hello world\\" \\"h\\"))" " (\= 0 (.lastIndexOf \\"hello world, hello\\" \\"hello\\"))" "(.lastIndexOf \\"hello world, hello\\" \\"hello\\")" "(\= 13 (.lastIndexOf \\"hello world, hello\\" \\"hello\\"))" "(string/index-of \\"hello world\\" \\"bob\\")" "(indexOf \\"hello world\\" \\"bob\\")" "(.indexOf \\"hello world\\" \\"bob\\")" "'(1 2 3 4 5)" "(\= '(1 2 3 4 5) (list 1 2 3 4 5))" "(first '(1 2 3 4 5))" "(\= 1(first '(1 2 3 4 5)))" "(rest '(1 2 3 4))" "(\= '(2 3 4) (rest '(1 2 3 4)))" "(count '(dracula dooku chocula))" "(\= 3 (count '(dracula dooku chocula)))" "(count '())" "(\= 0 (count '()))" "\\n(rest '(100))" "(rest '(100))" "(\= ()(rest '(100)))" "\\n(cons \:a '(\:b \:b \:d \:e))" "(\= '(\:a \:b \:c \:d)(cons \:a '(\:b \:b \:d \:e)))" "(\= '(\:a \:b \:c \:d)(cons \:a '(\:b \:c \:d \:e)))" "(\= '(\:a \:b \:c \:d)(cons \:a '(\:b \:c \:d)))" "(conj '(\:a \:b\:c\:d) \:e)" "(conj '(\:a \:b \:c \:d) \:e)" "(conj \:e '(\:a \:b \:c \:d))" "(conj '(\:a \:b \:c \:d) \:e)" "(\= '(\:a \:b \:c \:d \:e) (conj '(\:a \:b \:c \:d) \:e))" "(\= '(\:e \:a \:b \:c \:d) (conj '(\:a \:b \:c \:d) \:e))" "(peek '(a b c d e))" "(\= \:a (peek '(\:a \:b \:c \:d \:e)))" "(pop '(\:a \:b \:c \:d \:e))" "(\= '(\:b \:c \:d \:e))(pop '(\:a \:b \:c \:d \:e))" "(pop '())" "(try (pop '()) (catch IllegalStateException e \\"No dice\\"\!))" "try\\n          (pop '())\\n          (catch IllegalStateException e\\n            \\"No dice\!\\")))" "(try\\n          (pop '())\\n          (catch IllegalStateException e\\n            \\"No dice\!\\")))" "(try \\n  (pop '())\\n  (catch IllegalStateException e\\n    \\"No dice\!\\"))" "( \= \\"No dice\!\\" (try \\n                (pop '())\\n                (catch IllegalStateException e\\n                  \\"No dice\!\\")))" "(rest '())" "(try\\n  (rest '())\\n  (catch IllegalStateException e \\n    \\"No dice\!\\"))" "( \= \\"No dice\!\\"\\n    (try\\n     (rest '())\\n     (catch IllegalStateException e \\n       \\"No dice\!\\")))" "( \= '()\\n    (try\\n     (rest '())\\n     (catch IllegalStateException e \\n       \\"No dice\!\\")))"]
eclipse.preferences.version=1
