cmdhistory=["(\= true true)" "(\= 1 1)" "(nil? nil)" "(nil? 1)" "(fn [x] \\n  (* x 2))" "(map (fn [x](* x 2)) 2)" "(double number 2)" "(double-number 2)" "(double-number 3)" "(\= true true)" "(\= 2 (+ 1 1))" "(\= true true)" "(\= (+ 3 4) 7 (+ 2 5))" "(\= (+ 3 4) (+ 2 5))" "(\= 2 2 2)" "(\= 2 (\= 2 2/1))" "(\= 2 2/1)" "(\= true (\= 2 2/1))" "(\= 2 (\= 2 2/1))" "(\= 1 (\= 2 2/1))" "(\= 4 (\= 2 2/1))" "(\= 2 2.0)" "(\=  false (\= 2 2.0))" "(\=\= 2.0 2)" "(\= \\"hello\\" \:hello)" "(\= \\"hello\\" \:hello 'hello)" "(keyword \\"blues\\")" "(type \:blues)" "{\:a 1 \:b 2 \:c 3}" "(type {\:a 1 \:b 2 \:c 3})" "(mapa {\:a 1 \:b 2 \:c 3})" "(def mapa {\:a 1 \:b 2 \:c 3})" "(type mapa)" "(mapa (\:b {\:a 1 \:b 2 \:c 3}))" "(\:b {\:a 1 \:b 2 \:c 3})" "mapa" "(mapa (\:a))" "(mapa \:a)" "(symbol 'foo)" "(symbol \\"dpos\\")" "(\= \\"hello\\" \:hello 'hello)" "(\= 1 nill)" "(\= 1 nil)" "(not (\= 1 nil))" "(keyword x)" "(keyword)" "(keyword \:keyword)" "(\= \:hello (keyword \:keyword))" "(\= \:hello (keyword \:hello))" "(\= 'hello (symbol 'hello))" "  (\= nil nil)" "(\= 0 nil)" "(\= \:fill-in-the-blank \:fill-in-the-blank)" "(not\= \:fill-in-the-blank \:fill-in-the-blank)" "(\= \:fill-in-the-blank \:hello)" "(not\= \:fill-in-the-blank \:different)" "(\= \\"hello\\" \\"hello\\")" "(str 'world)" "(\= \\"world\\" (str 'world))" "(\= \\"Cool right?\\" (str 'cool 'right?))" "(\= \\"Cool right?\\" (str 'cool ' right?))" "(\= \\"Cool right?\\" (str 'Cool 'right?))" "(\= \\"Cool right?\\" (str 'Cool right?))" "(\= \\"Cool right?\\" (str 'Cool \:keyword right?))" "(\= \\"Cool right?\\" (str 'Cool \:right?))" "(\= \\"Coolright?\\" (str 'Cool \:right?))" "(\= \\"Coolright?\\" (str 'Cool 'right?))" "(\= \\"Coolright?\\" (str 'Cool \:right?))" "(get \\"Characters\\" h)" "(get \\"Characters\\")" "(get \\"Characters\\" chara)" "(get \\"Characters\\" \\"c\\")" "(get \\"Characters\\" \\"Characters\\")" "(get \\"Characters\\" 2)" "(\= \\\\C (get \\"Characters\\"))" "(\= \\\\C (get \\"Characters\\" 1))" "(\= \\\\C (get \\"Characters\\" 0))" "(count \\"Hello World\\")" "(\= 11 (count \\"Hello World\\"))" "(\= false (\= \\\\c \\"c\\"))" "(subs \\"Hello World\\" 0 5)" "(subs \\"Hello World\\" 6 11)" "(\= World (subs \\"Hello World\\" 6 11))" "(\= \\"World\\" (subs \\"Hello World\\" 6 11))" "(string/join '(1 2 3))" "(\= false (string/join '(1 2 3)))" "(\= \\"1, 2, 3\\" (string/join '(1 2 3)))" "(string/join \\", \\" '(1 2 3))" "(string/split-lines \\"1\\\\n2\\\\n3\\")" "(char? \\\\c)" "(string? /b)" "(string? \\\\b)" "(\= true (string? \\"String\\"))" "(string/blank? \\"\\")" "(string/blank? \\" \\")" "(\= true (string/blank? \\" \\"))" "(\= true (string/blank? \\"s\\"))" "(\= true (string/blank? \\"\\\\t\\"))" "(string/blank? \\" \\\\n \\\\t  \\")" "string/blank" " (clojure.string/blank? \\" a \\")" " (string/blank? \\" a \\")" "(clojure.string/blank? \\" \\")" "(clojure.string/blank? \\" \\\\n \\\\t \\\\r\\")" "(clojure.string/blank? \\"hello?\\\\nare you out there?\\")" "(string/split-lines \\"1\\\\n2\\\\n3\\")" "(clojure.string/split-lines \\"1\\\\n2\\\\n3\\")" " (\= [1 2 3] (string/split-lines \\"1\\\\n2\\\\n3\\"))" " (\= [\\"1\\" \\"2\\" \\"3] (string/split-lines \\"1\\\\n2\\\\n3\\"))" " (\= [\\"1\\" \\"2\\" \\"3\\"] (string/split-lines \\"1\\\\n2\\\\n3\\"))" " (\= [\\"1\\" \\"2\\" \\"3\\"] (clojure.string/split-lines \\"1\\\\n2\\\\n3\\"))" "(string/reverse \\"hello\\")" "(clojure.string/reverse \\"hello\\")" "(clojure.string/join \\", \\" '(1 2 3))" "  (\= \\"1, 2, 3\\" (clojure.string/join \\",\\" '(1 2 3)))" "(\= \\"1, 2, 3\\" (clojure.string/join \\", \\" '(1 2 3)))" "(\= 0 (clojure.string/index-of \\"hello world\\" \\\\h))" "(\= 0 (string/index-of \\"hello world\\" \\\\h))" "(clojure.string/index-of \\"hello world\\" \\\\h)" "(clojure.string/index-of \\"hello world\\" \\"h\\")" "(string/index-of \\"hello world\\" \\"h\\")" "(string/last-index-of \\"hello world, hello\\" \\"hello\\")" "(clojure.string/last-index-of \\"hello world, hello\\" \\"hello\\")" "(string/trim \\"  \\\\nhello world \\\\t \\\\n\\")" "(clojure.string/trim \\"  \\\\nhello world \\\\t \\\\n\\")" "(string/index-of \\"hello world\\" \\"bob\\")" "(clojure.string/index-of \\"hello world\\" \\"bob\\")" "(.indexOf \\"hello world, hello\\" \\"hello\\")" "  (\= 0 (string/index-of \\"hello world\\" \\"h\\"))" "  (\= 0 (.index-of \\"hello world\\" \\"h\\"))" "  (\= 0 (.indexOf \\"hello world\\" \\"h\\"))" " (\= 0 (.lastIndexOf \\"hello world, hello\\" \\"hello\\"))" "(.lastIndexOf \\"hello world, hello\\" \\"hello\\")" "(\= 13 (.lastIndexOf \\"hello world, hello\\" \\"hello\\"))" "(string/index-of \\"hello world\\" \\"bob\\")" "(indexOf \\"hello world\\" \\"bob\\")" "(.indexOf \\"hello world\\" \\"bob\\")" "'(1 2 3 4 5)" "(\= '(1 2 3 4 5) (list 1 2 3 4 5))" "(first '(1 2 3 4 5))" "(\= 1(first '(1 2 3 4 5)))" "(rest '(1 2 3 4))" "(\= '(2 3 4) (rest '(1 2 3 4)))" "(count '(dracula dooku chocula))" "(\= 3 (count '(dracula dooku chocula)))" "(count '())" "(\= 0 (count '()))" "\\n(rest '(100))" "(rest '(100))" "(\= ()(rest '(100)))" "\\n(cons \:a '(\:b \:b \:d \:e))" "(\= '(\:a \:b \:c \:d)(cons \:a '(\:b \:b \:d \:e)))" "(\= '(\:a \:b \:c \:d)(cons \:a '(\:b \:c \:d \:e)))" "(\= '(\:a \:b \:c \:d)(cons \:a '(\:b \:c \:d)))" "(conj '(\:a \:b\:c\:d) \:e)" "(conj '(\:a \:b \:c \:d) \:e)" "(conj \:e '(\:a \:b \:c \:d))" "(conj '(\:a \:b \:c \:d) \:e)" "(\= '(\:a \:b \:c \:d \:e) (conj '(\:a \:b \:c \:d) \:e))" "(\= '(\:e \:a \:b \:c \:d) (conj '(\:a \:b \:c \:d) \:e))" "(peek '(a b c d e))" "(\= \:a (peek '(\:a \:b \:c \:d \:e)))" "(pop '(\:a \:b \:c \:d \:e))" "(\= '(\:b \:c \:d \:e))(pop '(\:a \:b \:c \:d \:e))" "(pop '())" "(try (pop '()) (catch IllegalStateException e \\"No dice\\"\!))" "try\\n          (pop '())\\n          (catch IllegalStateException e\\n            \\"No dice\!\\")))" "(try\\n          (pop '())\\n          (catch IllegalStateException e\\n            \\"No dice\!\\")))" "(try \\n  (pop '())\\n  (catch IllegalStateException e\\n    \\"No dice\!\\"))" "( \= \\"No dice\!\\" (try \\n                (pop '())\\n                (catch IllegalStateException e\\n                  \\"No dice\!\\")))" "(rest '())" "(try\\n  (rest '())\\n  (catch IllegalStateException e \\n    \\"No dice\!\\"))" "( \= \\"No dice\!\\"\\n    (try\\n     (rest '())\\n     (catch IllegalStateException e \\n       \\"No dice\!\\")))" "( \= '()\\n    (try\\n     (rest '())\\n     (catch IllegalStateException e \\n       \\"No dice\!\\")))" "\\n(count [42])" "(\= 1 (count [42]))" "(vec '(1))" "(\= [1] (vec '(1)))" "(vector nil nil)" "(\= [nil nil] (vector nil nil))" "\\n(vec '(1 2))" "(\= [1 1 2] (vec '(1 2)))" "(\= [1 2] (vec '(1 2)))" "(conj [111 222] 333)" "(\= [111 222 333] (conj [111 222] 333))" "(first [\:peanut \:butter \:and \:jelly])" "(\= \:peanut (first [\:peanut \:butter \:and \:jelly]))" "(\= \:jelly (last [\:peanut \:butter \:and \:jelly]))" "(nth [\:peanut \:butter \:and \:jelly] 3)" "(\= \:jelly (nth [\:peanut \:butter \:and \:jelly] 3))" "(subvec [\:peanut \:butter \:and \:jelly] 1 3)" "(subvec [\:peanut \:butter \:and \:jelly] 1 4)" "(subvec [\:peanut \:butter \:and \:jelly] 1 3)" "(\= [\:peanut \:butter \:and] (subvec [\:peanut \:butter \:and \:jelly] 1 3))" "(\= [\:peanut \:butter] (subvec [\:peanut \:butter \:and \:jelly] 1 3))" "(\= [\:butter \:and] (subvec [\:peanut \:butter \:and \:jelly] 1 3))" "(\= '(1 2 3) [1 2 3 ])" "(\= \#{3} (set [3]))" "(count \#{1 2 3})" "(\= 3 (count \#{1 2 3}))" "(set '(1 1 2 2 3 3 4 4 5 5))" "(\= \#{1 2 3 4 5} (set '(1 1 2 2 3 3 4 4 5 5)))" "(set/union \#{1 2 3 4} \#{2 3 5})" "(clojure.set/union \#{1 2 3 4} \#{2 3 5})" "(\= \#{1 2 3 4 5} (clojure.set/union \#{1 2 3 4} \#{2 3 5}))" "(clojure.set/intersection \#{1 2 3 4} \#{2 3 5})" "(\= \#{2 3} (clojure.set/intersection \#{1 2 3 4} \#{2 3 5}))" "(clojure.set/difference \#{1 2 3 4} \#{2 3 5})" "(\= \#{1 4} (clojure.set/difference \#{1 2 3 4} \#{2 3 5}))" "(hash-map \:a 1 \:b 2 \:c 3)" "(\= {\:a 1 \:b 2 \:c 3}(hash-map \:a 1 \:b 2 \:c 3))" "(\= {\:a 1}(hash-map \:a))" "(\= {\:a 1 }(hash-map \:a 1))" "(count {\:a 1\:b 2})" "(count hash-map {\:a 1\:b 2})" "(count hash {\:a 1 \:b 2})" "(count {\:a 1 \:b 2})" "(\= 2 (count {\:a 1 \:b 2}))" "(get {\:a 1 \:b 2} \:b)" "({\:a 1 \:b 2} \:a)" "\\n({\:a 1 \:b 2} \:b)" "(\= 1 ({\:a 1 \:b 2} \:a))" "(\:a {\:a 1 \:b 2})" "{2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"}" "(\= {2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"({2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"}))" "(\= {2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\" ({2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"}))" "(\= {2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"} ({2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"}))" "({2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"} 2014)" "(\= \\"Sochi\\" (({2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"} 2014)))" "(\= \\"Sochi\\" ({2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"} 2014))" "({\:a 1 \:b 2}\:c)" "(\= nil ({\:a 1 \:b 2}\:c))" "({\:a 1 \:b 2}\:c \:key-not-found)" "({\:a 1 \:b 2}\:c \:key-not-founs)" "(\= \:key-not-found ({\:a 1 \:b 2}\:c \:key-not-found))" "(contains? {\:a nil \:b nil} \:b)" "(contains? {\:a nil \:b nil} \:c)" "(\= false (contains? {\:a nil \:b nil} \:c))" "(1 \\"January\\" \\"February\\" 2)" "(1 \\"January\\" 2 \\"February\\")" "\\n{1 \\"January\\" 2 \\"February\\"}" "(assoc {1 \\"January\\"} 2 \\"February\\")" "(\= {2 \\"February\\", 1 \\"January\\"} (assoc {1 \\"January\\"} 2 \\"February\\"))" "\\n(dissoc {1 \\"January\\" 2 \\"February\\"})" "(dissoc {1 \\"January\\" 2 \\"February\\"} 2)" "\=({1 \\"January\\"} (dissoc {1 \\"January\\" 2 \\"February\\"} 2))" "(\= {1 \\"January\\"} (dissoc {1 \\"January\\" 2 \\"February\\"} 2))" "(merge {\:a 1 \:b 2} {\:c 3})" "(\= {\:a 1 \:b 2 \:c 3} (merge {\:a 1 \:b 2} {\:c 3}))" "(merge-with + {\:a 1 \:b 1} {\:b 1 \:c 3})" "(\= {\:a 1 \:b 2 \:c 3} (merge-with + {\:a 1 \:b 1} {\:b 1 \:c 3}))" "(keys { 2014 \\"Sochi\\" 2018 \\"PyeongChang\\" 2010 \\"Vancouver\\"})" "(sort (keys { 2014 \\"Sochi\\" 2018 \\"PyeongChang\\" 2010 \\"Vancouver\\"}))" "(keys { 2014 \\"Sochi\\" 2018 \\"PyeongChang\\" 2010 \\"Vancouver\\"})" "(sort (keys { 2014 \\"Sochi\\" 2018 \\"PyeongChang\\" 2010 \\"Vancouver\\"}))" "(\= '(2010 2014 2018) (sort (keys { 2014 \\"Sochi\\" 2018 \\"PyeongChang\\" 2010 \\"Vancouver\\"})))" "(map (fn [[k v]] [k (inc v)]) {\:a 1 \:b 2} )" "(map (fn [[k v]] [k (inc v)]) {\:a 1 \:b 2})" "(into {} (map (fn [[k v]] [k (inc v)]) {\:a 1 \:b 2}))" "(\= {\:a 2 \:b 3} (into {} (map (fn [[k v]] [k (inc v)]) {\:a 1 \:b 2})))" " (vals {2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"})" " (\=\\"PyeongChang\\" \\"Vancouver\\" \\"Sochi\\" (vals {2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"}))" " (\= (\\"PyeongChang\\" \\"Vancouver\\" \\"Sochi\\") (vals {2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"}))" " (\= '(\\"PyeongChang\\" \\"Vancouver\\" \\"Sochi\\") (vals {2010 \\"Vancouver\\" 2014 \\"Sochi\\" 2018 \\"PyeongChang\\"}))" "d" "(multiply-by-ten 10)" "(multiply-by-ten)" "multiply-by-ten 10" "multiply-by-ten" "(multiply-by-ten [10])" "(multiply-by-ten 2)" "\\n(multiply-by-ten [10])" "(multiply-by-ten 10)" "(square 2 2)" "(square 2)" "(\= 81 (square 9))" "(\= 20 (multiply-by-ten 2))" "(fn [n] (* 5 n)) 2)" "(fn [2] (* 5 2))" "(fn [] (* 5 2))" "(fn (* 5 2))" "(fn [] (* 5 2))" "((fn [n] (* 5 n)) 2)" "(2 (fn [n] (* 5 n)))" "((fn [n] (* 5 n)) 2)" "(\= 10 (2 (fn [n] (* 5 n))))" "(\= 10 ((fn [n] (* 5 n)) 2))" "(\#(* 15 %) 4)" "(\= 60(\#(* 15 %) 4))" "(\#(+ %1 %2 %3) 4 5 6)" "(\= 15 (\#(+ %1 %2 %3) 4 5 6))" "(\#(* 15 %2)1 2)" "(\= 30 (\#(* 15 %2)1 2))" "(5 (fn [n] (* n n))" "(\= 25 (5 (fn [n] (* n n)))" " (((fn [] (+ %1 %2))) 4 5)" "(fn [] (+ 4 5))" "(fn [f] (f 4 5))" "((fn [f] (f 4 5)) 2)" "( 5 (fn [n] (* n n)))" "(((fn [] +)) 4 5)" "(((fn [] ___)) 4 5)" "(\= 9 (((fn [] +)) 4 5))" "(\= 9 (((fn [] (+ 4 5))) 4 5))" "(1, 2, 3)" "lista (1, 2, 3)" "(\= 2 (+ 1 1))" " (\= 81 (square 9))" "(\= 9 (((fn [] (+ 4 5))) 4 5))" "  (\= 20 ((fn [f] (f 4 5))\\n           11))" "(\= 20 ((fn [f] (f 4 5)) 11))" "(2 square)" "(\= 25 (5 square)))" "  (\= 25 ((suare 5)\\n          (fn [n] (* n n))))" "  (\= 25 (5 square)))" "(\= 4 5)" "(false? (\= 4 5))" "(if (false? (\= 4 5)))" "(if (false? (\= 4 5))\\n  \:a \\n  \:b\\n  )" "\\n(if (> 4 3)\\n  [])" "\\n(\= [] (if (> 4 3)\\n        []))" "\\n(nil? 0)" "(if (nil? 0)\\n  [\:a \:b \:c]\\n  )" "(\= nil (if (nil? 0)\\n  [\:a \:b \:c]\\n  ))" "(if\\n  (not\\n    (empty? ()\\n            \:dom\\n            \:glory)))" "(if\\n  not(\\n       empty( ()\\n              \:dom\\n              \:glory)))" "(\= \:glory (if (not (empty? ()))\\n              \:doom\\n              \:glory))" "(empty? ())" "(not (empty? ()))" "(if (not (empty? ())))" "(if (not (empty? ()))\\n  \:doom\\n  \:gloty)" "(cond \\n  (\= x 5) \:road-not-taken\\n  (\= x 6) \:another-road-not-taken\\n  \:else )" "(let [x 5]\\n  (cond \\n    (\= x 5) \:road-not-taken\\n    (\= x 6) \:another-road-not-taken\\n    \:else \:your-road)))" "(let [x 5]\\n  (cond \\n    (\= x 5) \:road-not-taken\\n    (\= x 6) \:another-road-not-taken\\n    \:else \:your-road))" "(let [x 2]\\n  (cond \\n    (\= x 5) \:road-not-taken\\n    (\= x 6) \:another-road-not-taken\\n    \:else \:your-road))" "  (let [x 5]\\n    (\= \:your-road (cond (\= x 3) \:road-not-taken\\n                        (\= x 4) \:another-road-not-taken\\n                        \:else 5)))" "  (let [x 5]\\n    (\= \:your-road (cond (\= x 3) \:road-not-taken\\n                        (\= x 4) \:another-road-not-taken\\n                        \:else \:your-road)))" "(zero? 0)" "(if-not (zero? 0))" "(if-not (zero? 0)\\n  'doom\\n  'more-doom)" "(if-not (zero? 1)\\n  'doom\\n  'more-doom)" "  (\= \\"pretty fast\\"\\n     (explain-exercise-velocity (explain-exercise-velocity \\"pretty fast\\")))" "  (\= \\"pretty fast\\"\\n     (explain-exercise-velocity (explain-exercise-velocity \:bicycling)))" "  (\= \\"pretty fast\\"\\n     (explain-exercise-velocity (\:bicycling)))" "(explain-exercise-velocity \:watching-tv)" "(\= \\"is that even exercise?\\" (explain-exercise-velocity \:watching-tv))" "  (\= \\"pretty fast\\"\\n     (explain-exercise-velocity \:bicycling ))" "(\= [4 8 12] (map (fn [x] (* 4 x) [1 2 3 4 5]))" "(\= [4 8 12] (map (fn [x] (* 4 x) [1 2 3 4 5])))" "(\= [4 8 12] (map (fn [x] (* 4 x) [1 2 3 4 5]))" "(\= 1 1)" "(\= [4 8 12] \\n   (map \\n     (fn [x] (* 4 x)) [1 2 3 4 5])" "(\= [4 8 12] \\n   (map \\n     (fn [x] (* 4 x)) [1 2 3 4 5]))" "(\= [4 8 12 16 20] \\n   (map \\n     (fn [x] (* 4 x)) [1 2 3 4 5]))" "(\= [1 4 9 16 25] (map (fn [x] (* x x)) [1 2 3 4 5]))" "(map nil? [\:a \:b nil \:c \:d])" " (\= (false false true false false) (map nil? [\:a \:b nil \:c \:d]))" " (\= false (map nil? [\:a \:b nil \:c \:d]))" " (\= true (map nil? [\:a \:b nil \:c \:d]))" "(\= '(false false true false false) (map nil? [\:a \:b nil \:c \:d]))" "'(\:anything \:goes \:here)" "(filter (fn [x] false) '(\:anything \:goes \:here))" "(\= () (filter (fn [x] false) '(\:anything \:goes \:here)))" "(filter (fn [x] true) '(\:anything \:goes \:here))" "(filter (fn [x] __) [10 20 30 40 50 60 70 80])" "(filter (fn [x] true) [10 20 30 40 50 60 70 80])" "(filter (fn [x] false) [10 20 30 40 50 60 70 80])" "(filter (fn [x] 10) [10 20 30 40 50 60 70 80])" "(filter (fn [x] nil) [10 20 30 40 50 60 70 80])" "(filter (fn [x] [10 20 30]) [10 20 30 40 50 60 70 80])" "(filter (fn [x] (\= * 10)) [10 20 30 40 50 60 70 80])" " (\= [10 20 30] (filter (fn [x] (* 10) [10 20 30 40 50 60 70 80]))" " (\= [10 20 30] (filter (fn [x] (* x 10) [10 20 30 40 50 60 70 80]))" " (\= [10 20 30] (filter (fn [x] (+ x 10) [10 20 30 40 50 60 70 80]))" "(\= [10 20 30] (filter (fn [x] (* x 10)) [10 20 30 40 50 60 70 80]))" "(\= [10 20 30] (filter (fn [x] (> 10) (< 30)) [10 20 30 40 50 60 70 80]))" "(filter (fn [x] (> 10) (< 30)) [10 20 30 40 50 60 70 80])" "(filter (fn [x] (> 2) (< 2)) [10 20 30 40 50 60 70 80])" "(filter (fn [x] (> x 10)) [10 20 30 40 50 60 70 80])" "(filter (fn [x] (> x 10) (< x 30)) [10 20 30 40 50 60 70 80])" "(filter (fn [x] (> x 10) (< x 40)) [10 20 30 40 50 60 70 80])" "(\= [10 20 30] (filter (fn [x] (> x 10) (< x 40)) [10 20 30 40 50 60 70 80]))" "(filter (fn [x] (> x 1) (< x 4)) [1 2 3 4 5 6 7 8]))" "(filter (fn [x] (> x 1) (< x 4)) [1 2 3 4 5 6 7 8])" " (\= [10 20 30] (map (fn [x] (* x 10)) (filter (fn [x] (> x 1) (< x 4)) [1 2 3 4 5 6 7 8])))" "(fn [a b] (* a b)) [1 2 3 4])" "(reduce (fn [a b] (* a b)) [1 2 3 4])" "  (\= 2400 (reduce (fn [a b] (* a b)) 10 [1 2 3 4]))" "  (\= 2400 (reduce (fn [a b] (* a b)) (/ 100) [1 2 3 4]))" "(reduce (fn [a b] (* a b)) (/ 100) [1 2 3 4])" "(reduce (fn [a b] (* a b)) 10 [1 2 3 4])" "(reduce (fn [a b] (* a b)) 1000 [1 2 3 4])" "(\= 2400 (reduce (fn [a b] (* a b)) 100 [1 2 3 4]))" "(if (< __ __) b a))\\n                       [\\"which\\" \\"word\\" \\"is\\" \\"longest\\"])" "(\= \\"longest\\" (reduce (fn [a b]\\n                         (if (< a b) b a))\\n                       [\\"which\\" \\"word\\" \\"is\\" \\"longest\\"])))" "(\= \\"longest\\" (reduce (fn [a b]\\n                         (if (< a 1) b a))\\n                       [\\"which\\" \\"word\\" \\"is\\" \\"longest\\"])))" "(hello)" "(\= \\"Hello World\!\\" (hello))" "(hello \\"world\\")" "(hello \\"Peter\\" \\"Paul\\" \\"Mary\\")" " (diet {\:species \\"deer\\" \:name \\"Bambi\\" \:age 1 \:eater \:herbivore})" "(\= \\"Bambi eats veggies.\\"\\n     (diet {\:species \\"deer\\" \:name \\"Bambi\\" \:age 1 \:eater \:herbivore}))" " (\= \\"Thumper eats veggies.\\"\\n     (diet {\:species \\"rabbit\\" \:name \\"Thumper\\" \:age 1 \:eater \:herbivore}))" "  \\"You may use a default method when no others match\\"\\n  (\= \\"I don't know what Rich Hickey eats.\\"\\n     (diet {\:name \\"Rich Hickey\\"}))" "(range 1 5)" "(\= '(1 2 3 4)(range 1 5))" "(range 5)" "(range 100)" "(take 10 (range 100))" "  (\= [0 1 2 3 4 5 6 7 8 9]\\n     (take 10 (range 100)))" "(drop 95 (range 100))" "(\= [95 96 97 98 99]\\n     (drop 95 (range 100)))" "(iterate inc 0)" "e" "stop" "exit" "<type clojure code here>  (\= [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\\n     (take 20 (iterate inc 0)))" "  (\= [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\\n     (take 20 (iterate inc 0)))" "(take 20 (iterate inc 0))" " (\= [95 96 97 98 99]\\n     (drop 95 (range 100)))" "f" "(iterate INC 0)" "'(1 2 3)" "(\= '(1 2 3 4)(range 1 5))" "(1 2 3)" "'(1 2 3)" "(iterate 10 \:hello)" "(iterate inc \:hello)" "(take 100 (iterate  inc \:hello))" " (take 100 (iterate  10 \:hello))" "(repeat 100 \:hello)" "(repeat 100 \:hello)\\n     (take 100 (iterate  100 \:hello)))" "(repeat 100 \:hello)\\n     (take 100 (iterate  inc \:hello)))" "(repeat 100 \:hello)\\n     (take 100 (iterate  dec \:hello)))" "(range 6)" "(for [x (range 6)] x)" "(\= '(0 1 2 3 4 5 ) (for [x (range 6)] x))" "(map \\n  (fn [x] (* x x))\\n  (range 6)" "(map \\n  (fn [x] (* x x))\\n  (range 6))" "(map \\n  (fn [x] (* x x))\\n  (range 6)) \\n(for [x (range 6)]\\n  x))" "(map \\n  (fn [x] (* x x))\\n  (range 6)) \\n(for [x (range 6)]\\n  x)" "(map \\n  (fn [x] (* x x))\\n  (range 6)) \\n(for [x (range 6)]\\n  (* x x))" " (\= '(0 1 4 9 16 25)\\n     (map (fn [x] (* x x))\\n          (range 6))\\n     (for [x (range 6)]\\n       (* x x)))" "(filter odd? (range 10))" "(for [x inc \:when (odd? x)] x)" "(for [x (+ 1 x) \:when (odd? x)] x)" "(for [x (+ 1) \:when (odd? x)] x)" " (map (fn [x] (* x x))\\n          (filter odd? (range 10))" "(map (fn [x] (* x x))\\n         (filter odd? (range 10)))" "(for [x (range 10) \:when (odd? x)]\\n       x))" "  (\= '(1 3 5 7 9)\\n     (filter odd? (range 10))\\n     (for [x (range 10) \:when (odd? x)]\\n       x))" " (\= '(1 9 25 49 81)\\n     (map (fn [x] (* x x))\\n          (filter odd? (range 10)))\\n     (for [x (range 10) \:when (odd? x)]\\n       x))" " (map (fn [x] (* x x))\\n          (filter odd? (range 10)))\\n     (for [x (range 10) \:when (odd? x)]\\n       x)" " (map (fn [x] (* x x))\\n          (filter odd? (range 10)))\\n     (for [x (range 10) \:when (* x x)]\\n       x)" " (map (fn [x] (* x x))\\n          (filter odd? (range 10)))\\n     (for [x (range 10) \:when odd?]\\n       (* x x))" " (map (fn [x] (* x x))\\n          (filter odd? (range 10)))\\n     (for [x (range 10) \:when (odd? x)]\\n       (* x x))" " (for [row [\:top \:middle \:bottom]\\n           column [\:left \:middle \:right]]\\n       (range 10)))" "(let [not-a-symbol? (complement symbol?)]\\n                  (map not-a-symbol? [\:a 'b \\"c\\"]))" "(not-a-symbol? [\:a 'b \\"c\\"])" "(map not-a-symbol? [\:a 'b \\"c\\"])" "(\= [true false true] (let [not-a-symbol? (complement symbol?)]\\n                         (map not-a-symbol? [\:a 'b \\"c\\"])))" "(deref the-world)"]
eclipse.preferences.version=1
